{"version":3,"file":"main-CStQAm67.js","sources":["../../countryData.js","../../api.js","../../js/errorHandler.js","../../main.js"],"sourcesContent":["export const countryNamesByCode = {\r\n    // Main country codes\r\n    4: \"Afghanistan\", 8: \"Albania\", 10: \"Antarctica\", 12: \"Algeria\", 16: \"American Samoa\", 20: \"Andorra\",\r\n    24: \"Angola\", 28: \"Antigua and Barbuda\", 31: \"Azerbaijan\", 32: \"Argentina\", 36: \"Australia\", 40: \"Austria\",\r\n    44: \"Bahamas\", 48: \"Bahrain\", 50: \"Bangladesh\", 51: \"Armenia\", 52: \"Barbados\", 56: \"Belgium\",\r\n    60: \"Bermuda\", 64: \"Bhutan\", 68: \"Bolivia\", 70: \"Bosnia and Herzegovina\", 72: \"Botswana\", 76: \"Brazil\",\r\n    84: \"Belize\", 90: \"Solomon Islands\", 92: \"British Virgin Islands\", 96: \"Brunei\", 100: \"Bulgaria\",\r\n    104: \"Myanmar\", 108: \"Burundi\", 112: \"Belarus\", 116: \"Cambodia\", 120: \"Cameroon\", 124: \"Canada\",\r\n    132: \"Cape Verde\", 136: \"Cayman Islands\", 140: \"Central African Republic\", 144: \"Sri Lanka\",\r\n    148: \"Chad\", 152: \"Chile\", 156: \"China\", 170: \"Colombia\", 174: \"Comoros\", 175: \"Mayotte\",\r\n    178: \"Congo\", 180: \"Democratic Republic of the Congo\", 184: \"Cook Islands\", 188: \"Costa Rica\",\r\n    191: \"Croatia\", 192: \"Cuba\", 196: \"Cyprus\", 203: \"Czech Republic\", 204: \"Benin\", 208: \"Denmark\",\r\n    212: \"Dominica\", 214: \"Dominican Republic\", 218: \"Ecuador\", 222: \"El Salvador\", 226: \"Equatorial Guinea\",\r\n    231: \"Ethiopia\", 232: \"Eritrea\", 233: \"Estonia\", 234: \"Faroe Islands\", 242: \"Fiji\", 246: \"Finland\",\r\n    250: \"France\", 254: \"French Guiana\", 258: \"French Polynesia\", 262: \"Djibouti\", 266: \"Gabon\",\r\n    268: \"Georgia\", 270: \"Gambia\", 275: \"Palestine\", 276: \"Germany\", 288: \"Ghana\", 292: \"Gibraltar\",\r\n    296: \"Kiribati\", 300: \"Greece\", 304: \"Greenland\", 308: \"Grenada\", 312: \"Guadeloupe\", 316: \"Guam\",\r\n    320: \"Guatemala\", 324: \"Guinea\", 328: \"Guyana\", 332: \"Haiti\", 336: \"Vatican City\", 340: \"Honduras\",\r\n    344: \"Hong Kong\", 348: \"Hungary\", 352: \"Iceland\", 356: \"India\", 360: \"Indonesia\", 364: \"Iran\",\r\n    368: \"Iraq\", 372: \"Ireland\", 376: \"Israel\", 380: \"Italy\", 384: \"Ivory Coast\", 388: \"Jamaica\",\r\n    392: \"Japan\", 398: \"Kazakhstan\", 400: \"Jordan\", 404: \"Kenya\", 408: \"North Korea\", 410: \"South Korea\",\r\n    414: \"Kuwait\", 417: \"Kyrgyzstan\", 418: \"Laos\", 422: \"Lebanon\", 426: \"Lesotho\", 428: \"Latvia\",\r\n    430: \"Liberia\", 434: \"Libya\", 438: \"Liechtenstein\", 440: \"Lithuania\", 442: \"Luxembourg\", 446: \"Macao\",\r\n    450: \"Madagascar\", 454: \"Malawi\", 458: \"Malaysia\", 462: \"Maldives\", 466: \"Mali\", 470: \"Malta\",\r\n    474: \"Martinique\", 478: \"Mauritania\", 480: \"Mauritius\", 484: \"Mexico\", 492: \"Monaco\", 496: \"Mongolia\",\r\n    498: \"Moldova\", 499: \"Montenegro\", 500: \"Montserrat\", 504: \"Morocco\", 508: \"Mozambique\", 512: \"Oman\",\r\n    516: \"Namibia\", 520: \"Nauru\", 524: \"Nepal\", 528: \"Netherlands\", 531: \"Curacao\", 533: \"Aruba\",\r\n    534: \"Sint Maarten\", 535: \"Bonaire\", 540: \"New Caledonia\", 548: \"Vanuatu\", 554: \"New Zealand\",\r\n    558: \"Nicaragua\", 562: \"Niger\", 566: \"Nigeria\", 570: \"Niue\", 574: \"Norfolk Island\", 578: \"Norway\",\r\n    580: \"Northern Mariana Islands\", 581: \"United States Minor Outlying Islands\", 583: \"Micronesia\", \r\n    584: \"Marshall Islands\", 585: \"Palau\", 586: \"Pakistan\", 591: \"Panama\", 598: \"Papua New Guinea\",\r\n    600: \"Paraguay\", 604: \"Peru\", 608: \"Philippines\", 612: \"Pitcairn Islands\", 616: \"Poland\",\r\n    620: \"Portugal\", 624: \"Guinea-Bissau\", 626: \"East Timor\", 630: \"Puerto Rico\", 634: \"Qatar\",\r\n    638: \"Reunion\", 642: \"Romania\", 643: \"Russia\", 646: \"Rwanda\", 654: \"Saint Helena\",\r\n    659: \"Saint Kitts and Nevis\", 662: \"Saint Lucia\", 666: \"Saint Pierre and Miquelon\",\r\n    670: \"Saint Vincent and the Grenadines\", 674: \"San Marino\", 678: \"Sao Tome and Principe\",\r\n    682: \"Saudi Arabia\", 686: \"Senegal\", 688: \"Serbia\", 690: \"Seychelles\", 694: \"Sierra Leone\",\r\n    702: \"Singapore\", 703: \"Slovakia\", 704: \"Vietnam\", 705: \"Slovenia\", 706: \"Somalia\",\r\n    710: \"South Africa\", 716: \"Zimbabwe\", 724: \"Spain\", 728: \"South Sudan\", 729: \"Sudan\",\r\n    732: \"Western Sahara\", 740: \"Suriname\", 744: \"Svalbard and Jan Mayen\", 748: \"Swaziland\",\r\n    752: \"Sweden\", 756: \"Switzerland\", 760: \"Syria\", 762: \"Tajikistan\", 764: \"Thailand\",\r\n    768: \"Togo\", 772: \"Tokelau\", 776: \"Tonga\", 780: \"Trinidad and Tobago\", 784: \"United Arab Emirates\",\r\n    788: \"Tunisia\", 792: \"Turkey\", 795: \"Turkmenistan\", 796: \"Turks and Caicos Islands\",\r\n    798: \"Tuvalu\", 800: \"Uganda\", 804: \"Ukraine\", 807: \"North Macedonia\", 818: \"Egypt\",\r\n    826: \"United Kingdom\", 831: \"Guernsey\", 832: \"Jersey\", 833: \"Isle of Man\", 834: \"Tanzania\",\r\n    840: \"United States\", 850: \"U.S. Virgin Islands\", 854: \"Burkina Faso\", 858: \"Uruguay\",\r\n    860: \"Uzbekistan\", 862: \"Venezuela\", 876: \"Wallis and Futuna\", 882: \"Samoa\", 887: \"Yemen\",\r\n    894: \"Zambia\",\r\n\r\n    // Special territories and alternate codes (using 900+ range to avoid conflicts)\r\n    901: \"British Antarctic Territory\",\r\n    902: \"British Indian Ocean Territory\",\r\n    903: \"French Southern Territories\",\r\n    904: \"South Georgia and South Sandwich Islands\",\r\n    905: \"Heard Island and McDonald Islands\",\r\n    906: \"Caribbean Netherlands\",\r\n    907: \"Saint Barthelemy\",\r\n    908: \"Saint Martin\",\r\n    909: \"Sark\",\r\n    910: \"Christmas Island\",\r\n    911: \"Cocos Islands\",\r\n    912: \"Northern Cyprus\",\r\n    913: \"South Ossetia\",\r\n    914: \"Transnistria\",\r\n    915: \"Wake Island\",\r\n    916: \"Abkhazia\",\r\n    917: \"Kosovo\"\r\n};\r\n","// Rate limiting configuration\r\nconst rateLimiter = {\r\n    tokens: 5,\r\n    refillRate: 1000, // 1 token per second\r\n    lastRefill: Date.now(),\r\n    bucket: 5, // Start with full bucket\r\n};\r\n\r\n// Token bucket rate limiting implementation\r\nfunction checkRateLimit() {\r\n    const now = Date.now();\r\n    const timePassed = now - rateLimiter.lastRefill;\r\n    const refillAmount = Math.floor(timePassed / rateLimiter.refillRate);\r\n    \r\n    if (refillAmount > 0) {\r\n        rateLimiter.bucket = Math.min(rateLimiter.tokens, rateLimiter.bucket + refillAmount);\r\n        rateLimiter.lastRefill = now;\r\n    }\r\n\r\n    if (rateLimiter.bucket <= 0) {\r\n        throw new Error('Rate limit exceeded. Please try again later.');\r\n    }\r\n\r\n    rateLimiter.bucket--;\r\n}\r\n\r\nexport async function fetchCountryStats(countryName) {\r\n    // Input validation\r\n    if (!countryName || typeof countryName !== 'string') {\r\n        throw new Error('Invalid country name');\r\n    }\r\n\r\n    // Check rate limit before making request\r\n    checkRateLimit();\r\n\r\n    // Sanitize input - only allow letters, numbers, spaces and hyphens\r\n    if (!/^[a-zA-Z0-9\\s-]+$/.test(countryName)) {\r\n        throw new Error('Invalid country name format');\r\n    }\r\n\r\n    const apiUrl = `https://restcountries.com/v3.1/name/${encodeURIComponent(countryName)}?fullText=true`;\r\n    \r\n    try {\r\n        const controller = new AbortController();\r\n        const timeout = setTimeout(() => controller.abort(), 5000); // 5 second timeout\r\n\r\n        const response = await fetch(apiUrl, {\r\n            signal: controller.signal,\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            },\r\n            referrerPolicy: 'no-referrer'\r\n        });\r\n\r\n        clearTimeout(timeout);\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to fetch data for ${countryName}: ${response.statusText}`);\r\n        }\r\n\r\n        const jsonData = await response.json();\r\n        \r\n        // Validate response structure\r\n        if (!Array.isArray(jsonData) || !jsonData.length || !jsonData[0]) {\r\n            throw new Error('Invalid response format');\r\n        }\r\n\r\n        // Basic data sanitization\r\n        const sanitizedData = jsonData[0];\r\n        if (typeof sanitizedData !== 'object') {\r\n            throw new Error('Invalid data format');\r\n        }\r\n\r\n        return sanitizedData;\r\n    } catch (error) {\r\n        console.error(\"Error fetching country stats:\", error);\r\n        if (error.name === 'AbortError') {\r\n            throw new Error('Request timeout');\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","// Error handling and logging utility\r\nexport function initErrorHandling() {\r\n    window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n        const errorMessage = {\r\n            message: msg,\r\n            url: url,\r\n            line: lineNo,\r\n            column: columnNo,\r\n            error: error?.stack || 'No stack trace'\r\n        };\r\n\r\n        console.error('Global error:', errorMessage);\r\n        \r\n        // Show user-friendly error message\r\n        const errorContainer = document.createElement('div');\r\n        errorContainer.style.cssText = `\r\n            position: fixed;\r\n            bottom: 20px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background: rgba(255, 0, 0, 0.8);\r\n            color: white;\r\n            padding: 10px 20px;\r\n            border-radius: 5px;\r\n            z-index: 1000;\r\n            max-width: 80%;\r\n            text-align: center;\r\n        `;\r\n        errorContainer.textContent = 'An error occurred. Please try refreshing the page.';\r\n        document.body.appendChild(errorContainer);\r\n\r\n        // Remove error message after 5 seconds\r\n        setTimeout(() => {\r\n            errorContainer.remove();\r\n        }, 5000);\r\n\r\n        return false; // Let default handler run\r\n    };\r\n\r\n    // Handle unhandled promise rejections\r\n    window.addEventListener('unhandledrejection', function(event) {\r\n        console.error('Unhandled promise rejection:', event.reason);\r\n        return false;\r\n    });\r\n}\r\n\r\n// Function to safely parse JSON with error handling\r\nexport function safeJSONParse(json) {\r\n    try {\r\n        return JSON.parse(json);\r\n    } catch (e) {\r\n        console.error('JSON parse error:', e);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Function to sanitize strings to prevent XSS\r\nexport function sanitizeString(str) {\r\n    if (typeof str !== 'string') return '';\r\n    return str.replace(/[<>]/g, '');\r\n}","/* global THREE, topojson */\r\nimport { countryNamesByCode } from './countryData.js';\r\nimport { fetchCountryStats } from './api.js';\r\nimport { initErrorHandling, sanitizeString } from './js/errorHandler.js';\r\n\r\n// Global variables\r\nlet scene, camera, renderer, raycaster, mouse, countryNameDisplay;\r\nlet globe, globeGroup;\r\nlet countries = {};\r\nlet hoveredCountry = null;\r\nlet selectedCountry = null;  // Track currently selected country\r\nlet isDragging = false;\r\nlet previousMousePosition = { x: 0, y: 0 };\r\nlet globeRotation = { x: 0, y: 0 };\r\nlet minZoom = 110;\r\nlet maxZoom = 400;\r\nlet currentZoom = 200;\r\nlet isAutoRotating = true;\r\nconst autoRotationSpeed = 0.0005; // Very slow rotation speed\r\n\r\n// Material pool for better performance\r\nconst materialPool = {\r\n    line: new THREE.LineBasicMaterial({ color: 0x17202a, linewidth: 1 }),\r\n    shape: new THREE.MeshPhongMaterial({\r\n        color: 0xA9CCE3,\r\n        transparent: true,\r\n        opacity: 0,\r\n        side: THREE.DoubleSide,\r\n        flatShading: true\r\n    })\r\n};\r\n\r\n// Add these to global variables\r\nlet lastRotation = { x: 0, y: 0 };\r\nlet targetRotation = { x: 0, y: 0 };\r\nconst INTERPOLATION_FACTOR = 0.1;\r\n\r\n// Initialize error handling\r\ninitErrorHandling();\r\n\r\n// Initialize the scene\r\nfunction init() {\r\n    // Set up scene\r\n    scene = new THREE.Scene();\r\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.z = currentZoom;\r\n    \r\n    // Set up renderer\r\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    document.getElementById('container').appendChild(renderer.domElement);\r\n    \r\n    // Set up raycaster for mouse interaction\r\n    raycaster = new THREE.Raycaster();\r\n    mouse = new THREE.Vector2();\r\n    \r\n    // Reference to country name display\r\n    countryNameDisplay = document.getElementById('country-name');\r\n    \r\n    // Create a group for the globe and countries\r\n    globeGroup = new THREE.Group();\r\n    scene.add(globeGroup);\r\n    \r\n    // Create the globe\r\n    createGlobe();\r\n    \r\n    // Add lights\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.45);\r\n    directionalLight.position.set(5, 3, 5);\r\n    scene.add(directionalLight);\r\n    \r\n    // Add event listeners\r\n    window.addEventListener('resize', onWindowResize);\r\n    window.addEventListener('mousemove', onMouseMove);\r\n    renderer.domElement.addEventListener('mousedown', onMouseDown);\r\n    window.addEventListener('mouseup', onMouseUp);\r\n    renderer.domElement.addEventListener('wheel', onMouseWheel);\r\n    renderer.domElement.addEventListener('dblclick', onDoubleClick);\r\n    \r\n    // Start animation\r\n    animate();\r\n}\r\n\r\n// Create the globe with country outlines\r\nfunction createGlobe() {\r\n    const radius = 100;\r\n    const globeGeometry = new THREE.SphereGeometry(radius, 64, 64);\r\n    const globeMaterial = new THREE.MeshPhongMaterial({\r\n        color: 0xfef9e7,\r\n        transparent: false,\r\n        opacity: 1\r\n    });\r\n    \r\n    globe = new THREE.Mesh(globeGeometry, globeMaterial);\r\n    globeGroup.add(globe);\r\n    \r\n    // Load world data\r\n    fetch('https://raw.githubusercontent.com/mbostock/topojson/v1.6.19/examples/world-50m.json')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const countries = topojson.feature(data, data.objects.countries);\r\n            // Map country names using the countryNamesByCode object\r\n            countries.features.forEach(feature => {\r\n                feature.properties = feature.properties || {};\r\n                feature.properties.name = countryNamesByCode[feature.id] || `Country ${feature.id}`;\r\n            });\r\n            createCountryOutlines(countries, radius);\r\n            \r\n            // Add Kosovo manually after other countries are loaded\r\n            addKosovo(radius);\r\n        })\r\n        .catch(error => {\r\n            console.error('Error loading data:', error);\r\n            createSimulatedGlobe(radius);\r\n        });\r\n}\r\n\r\n// Add Kosovo as a separate country\r\nfunction addKosovo(radius) {\r\n    // Kosovo's approximate coordinates (vertices of the polygon)\r\n    const kosovoPoints = [\r\n        [20.590, 43.033], // Northwest\r\n        [20.520, 42.460], // Southwest\r\n        [21.020, 42.260], // South\r\n        [21.770, 42.310], // Southeast\r\n        [21.590, 42.862], // Northeast\r\n        [20.590, 43.033]  // Back to start\r\n    ].map(([lng, lat]) => latLngToVector3(lat, lng, radius));\r\n\r\n    // Create Kosovo's outline\r\n    const lineGeometry = new THREE.BufferGeometry();\r\n    lineGeometry.setAttribute('position', \r\n        new THREE.Float32BufferAttribute(kosovoPoints.flatMap(p => [p.x, p.y, p.z]), 3)\r\n    );\r\n    \r\n    const countryGroup = new THREE.Group();\r\n    countryGroup.userData = { \r\n        name: \"Kosovo\",\r\n        originalColor: 0x17202a,\r\n        id: 917,\r\n        parts: []\r\n    };\r\n\r\n    // Create line\r\n    const countryLine = new THREE.Line(lineGeometry, materialPool.line.clone());\r\n    \r\n    // Create shape\r\n    const shapeGeometry = new THREE.BufferGeometry();\r\n    const vertices = [];\r\n    const uvs = [];\r\n    \r\n    const center = new THREE.Vector3();\r\n    kosovoPoints.forEach(p => center.add(p));\r\n    center.divideScalar(kosovoPoints.length);\r\n    center.normalize().multiplyScalar(radius);\r\n\r\n    // Create triangle fan\r\n    for (let i = 0; i < kosovoPoints.length - 1; i++) {\r\n        vertices.push(\r\n            ...center.toArray(),\r\n            ...kosovoPoints[i].toArray(),\r\n            ...kosovoPoints[i + 1].toArray()\r\n        );\r\n        uvs.push(0, 0, 0, 1, 1, 1);\r\n    }\r\n    \r\n    shapeGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n    shapeGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n    shapeGeometry.computeVertexNormals();\r\n    \r\n    const countryShape = new THREE.Mesh(shapeGeometry, materialPool.shape.clone());\r\n    \r\n    countryLine.frustumCulled = true;\r\n    countryShape.frustumCulled = true;\r\n    \r\n    countryGroup.add(countryLine);\r\n    countryGroup.add(countryShape);\r\n    countryGroup.userData.parts.push({\r\n        line: countryLine,\r\n        shape: countryShape\r\n    });\r\n    \r\n    countries[917] = countryGroup;\r\n    globeGroup.add(countryGroup);\r\n}\r\n\r\n// Create country outlines from GeoJSON\r\nfunction createCountryOutlines(geoJson, radius) {\r\n    geoJson.features.forEach(feature => {\r\n        const countryName = feature.properties.name || 'Unknown Country';\r\n        \r\n        const countryGroup = new THREE.Group();\r\n        countryGroup.userData = { \r\n            name: countryName,\r\n            originalColor: 0x17202a, \r\n            id: feature.id,\r\n            parts: []\r\n        };\r\n        \r\n        if (feature.geometry.type === 'Polygon') {\r\n            createCountryPart(feature.geometry.coordinates, radius, countryGroup);\r\n        } else if (feature.geometry.type === 'MultiPolygon') {\r\n            feature.geometry.coordinates.forEach(poly => {\r\n                createCountryPart(poly, radius, countryGroup);\r\n            });\r\n        }\r\n        \r\n        countries[feature.id] = countryGroup;\r\n        globeGroup.add(countryGroup);\r\n    });\r\n}\r\n\r\nfunction createCountryPart(coords, radius, countryGroup) {\r\n    if (!coords || !coords[0] || coords[0].length < 3) {\r\n        return; // Skip invalid geometries\r\n    }\r\n\r\n    const points = [];\r\n    const distance = camera.position.z;\r\n    const skipPoints = Math.max(1, Math.floor(distance / 100));\r\n    \r\n    // Decimate geometry based on distance\r\n    for (let i = 0; i < coords[0].length; i += skipPoints) {\r\n        const coord = coords[0][i];\r\n        if (Array.isArray(coord) && coord.length >= 2) {\r\n            const [lng, lat] = coord;\r\n            const point = latLngToVector3(lat, lng, radius);\r\n            points.push(point);\r\n        }\r\n    }\r\n\r\n    if (points.length < 3) {\r\n        return; // Need at least 3 points for a valid shape\r\n    }\r\n\r\n    // Create line geometry\r\n    const lineGeometry = new THREE.BufferGeometry();\r\n    lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(points.flatMap(p => [p.x, p.y, p.z]), 3));\r\n    lineGeometry.computeBoundingSphere();\r\n    \r\n    const countryLine = new THREE.Line(lineGeometry, materialPool.line.clone());\r\n    \r\n    // Create shape geometry\r\n    const shapeGeometry = new THREE.BufferGeometry();\r\n    const vertices = [];\r\n    const uvs = [];\r\n    \r\n    const center = new THREE.Vector3();\r\n    points.forEach(p => center.add(p));\r\n    center.divideScalar(points.length);\r\n    center.normalize().multiplyScalar(radius);\r\n\r\n    // Create triangle fan around center point\r\n    for (let i = 0; i < points.length - 1; i++) {\r\n        vertices.push(\r\n            ...center.toArray(),\r\n            ...points[i].toArray(),\r\n            ...points[i + 1].toArray()\r\n        );\r\n        \r\n        uvs.push(0, 0, 0, 1, 1, 1);\r\n    }\r\n    \r\n    // Close the shape by connecting last point to first point\r\n    vertices.push(\r\n        ...center.toArray(),\r\n        ...points[points.length - 1].toArray(),\r\n        ...points[0].toArray()\r\n    );\r\n    uvs.push(0, 0, 0, 1, 1, 1);\r\n    \r\n    shapeGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n    shapeGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\r\n    shapeGeometry.computeVertexNormals();\r\n    shapeGeometry.computeBoundingSphere();\r\n    \r\n    const countryShape = new THREE.Mesh(shapeGeometry, materialPool.shape.clone());\r\n    \r\n    countryLine.frustumCulled = true;\r\n    countryShape.frustumCulled = true;\r\n    \r\n    countryGroup.add(countryLine);\r\n    countryGroup.add(countryShape);\r\n    countryGroup.userData.parts.push({\r\n        line: countryLine,\r\n        shape: countryShape\r\n    });\r\n}\r\n\r\n// Convert latitude and longitude to 3D vector\r\nfunction latLngToVector3(lat, lng, radius) {\r\n    const phi = (90 - lat) * Math.PI / 180;\r\n    const theta = (lng + 180) * Math.PI / 180;\r\n    \r\n    const x = -radius * Math.sin(phi) * Math.cos(theta);\r\n    const y = radius * Math.cos(phi);\r\n    const z = radius * Math.sin(phi) * Math.sin(theta);\r\n    \r\n    return new THREE.Vector3(x, y, z);\r\n}\r\n\r\n// Create a simulated globe with basic shapes if data loading fails\r\nfunction createSimulatedGlobe(radius) {\r\n    const basicShape = new THREE.SphereGeometry(radius, 32, 32);\r\n    const basicMaterial = new THREE.MeshBasicMaterial({ \r\n        color: 0xA9CCE3,\r\n        wireframe: true \r\n    });\r\n    const basicGlobe = new THREE.Mesh(basicShape, basicMaterial);\r\n    globeGroup.add(basicGlobe);\r\n}\r\n\r\n// Throttle function to limit how often a function can be called\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    return function(...args) {\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            func.apply(context, args);\r\n            inThrottle = true;\r\n            setTimeout(() => { inThrottle = false; }, limit);\r\n        }\r\n    };\r\n}\r\n\r\n// Handle mouse movement for raycasting\r\nfunction onMouseMove(event) {\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n    \r\n    if (isDragging) {\r\n        const deltaMove = {\r\n            x: event.clientX - previousMousePosition.x,\r\n            y: event.clientY - previousMousePosition.y\r\n        };\r\n\r\n        targetRotation.x += deltaMove.y * 0.005;\r\n        targetRotation.y += deltaMove.x * 0.005;\r\n\r\n        // Limit vertical rotation to avoid flipping\r\n        targetRotation.x = Math.max(-Math.PI/2, Math.min(Math.PI/2, targetRotation.x));\r\n\r\n        previousMousePosition = {\r\n            x: event.clientX,\r\n            y: event.clientY\r\n        };\r\n    }\r\n    \r\n    // Reduce raycasting frequency\r\n    if (!isDragging) {\r\n        throttledCheckIntersections();\r\n    }\r\n}\r\n\r\n// Throttled version of checkIntersections\r\nconst throttledCheckIntersections = throttle(checkIntersections, 100);\r\n\r\n// Check for intersections with mouse and countries\r\nfunction checkIntersections() {\r\n    raycaster.setFromCamera(mouse, camera);\r\n    \r\n    // Only reset hover effect if it's not the selected country\r\n    if (hoveredCountry && hoveredCountry !== selectedCountry) {\r\n        const country = countries[hoveredCountry];\r\n        if (country) {\r\n            if (country.userData.parts) {\r\n                country.userData.parts.forEach(part => {\r\n                    part.line.material.color.setHex(country.userData.originalColor);\r\n                    part.shape.material.opacity = 0;\r\n                    part.line.material.needsUpdate = true;\r\n                    part.shape.material.needsUpdate = true;\r\n                });\r\n            } else {\r\n                country.material.color.setHex(country.userData.originalColor);\r\n                country.material.needsUpdate = true;\r\n            }\r\n        }\r\n        hoveredCountry = null;\r\n        if (!selectedCountry) {\r\n            countryNameDisplay.textContent = '';\r\n        }\r\n    }\r\n\r\n    // Get all meshes for intersection testing\r\n    const allMeshes = [];\r\n    Object.values(countries).forEach(country => {\r\n        if (country.userData.parts) {\r\n            country.userData.parts.forEach(part => {\r\n                // Include both the line and shape for intersection testing\r\n                allMeshes.push(part.line);\r\n                allMeshes.push(part.shape);\r\n            });\r\n        } else {\r\n            allMeshes.push(country);\r\n        }\r\n    });\r\n    \r\n    const intersects = raycaster.intersectObjects(allMeshes);\r\n    \r\n    if (intersects.length > 0) {\r\n        const intersectedObject = intersects[0].object;\r\n        const countryGroup = intersectedObject.parent;\r\n        \r\n        // Don't override selected country highlight\r\n        if (countryGroup.userData.id !== selectedCountry) {\r\n            hoveredCountry = countryGroup.userData.id;\r\n            const highlightColor = 0xFFFFFF;\r\n            const linehighlightColor = 0x17202a;\r\n            \r\n            if (countryGroup.userData.parts) {\r\n                countryGroup.userData.parts.forEach(part => {\r\n                    part.line.material.color.setHex(linehighlightColor);\r\n                    part.shape.material.color.setHex(highlightColor);\r\n                    part.shape.material.opacity = 0.6;\r\n                    part.line.material.needsUpdate = true;\r\n                    part.shape.material.needsUpdate = true;\r\n                });\r\n            } else {\r\n                countryGroup.material.color.setHex(highlightColor);\r\n                countryGroup.material.needsUpdate = true;\r\n            }\r\n            \r\n            if (!selectedCountry) {\r\n                countryNameDisplay.textContent = countryGroup.userData.name;\r\n            }\r\n        }\r\n    } else if (!selectedCountry) {\r\n        countryNameDisplay.textContent = '';\r\n    }\r\n}\r\n\r\n// Handle window resizing\r\nfunction onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\n// Handle mouse down event\r\nfunction onMouseDown(event) {\r\n    isDragging = true;\r\n    isAutoRotating = false;  // Stop auto-rotation when user interacts\r\n    previousMousePosition = {\r\n        x: event.clientX,\r\n        y: event.clientY\r\n    };\r\n}\r\n\r\n// Handle mouse up event\r\nfunction onMouseUp() {\r\n    isDragging = false;\r\n    setTimeout(() => {\r\n        isAutoRotating = true;\r\n    }, 1000);\r\n}\r\n\r\n// Handle mouse wheel event\r\nfunction onMouseWheel(e) {\r\n    e.preventDefault();\r\n    isAutoRotating = false;  // Stop auto-rotation during zoom\r\n    \r\n    const zoomSpeed = 15;\r\n    const delta = -Math.sign(e.deltaY) * zoomSpeed;\r\n    \r\n    currentZoom = camera.position.z - delta;\r\n    currentZoom = Math.max(minZoom, Math.min(maxZoom, currentZoom));\r\n    \r\n    camera.position.z = currentZoom;\r\n\r\n    // Resume auto-rotation after a short delay\r\n    clearTimeout(this.wheelTimeout);\r\n    this.wheelTimeout = setTimeout(() => {\r\n        isAutoRotating = true;\r\n    }, 500);\r\n}\r\n\r\n// Handle double-click event\r\nfunction onDoubleClick() {\r\n    raycaster.setFromCamera(mouse, camera);\r\n\r\n    // Get all meshes for intersection testing\r\n    const allMeshes = [];\r\n    Object.values(countries).forEach(country => {\r\n        if (country.userData.parts) {\r\n            country.userData.parts.forEach(part => {\r\n                allMeshes.push(part.line);\r\n                allMeshes.push(part.shape);\r\n            });\r\n        } else {\r\n            allMeshes.push(country);\r\n        }\r\n    });\r\n\r\n    const intersects = raycaster.intersectObjects(allMeshes);\r\n\r\n    // Reset previous selection if clicking on empty space\r\n    if (intersects.length === 0) {\r\n        if (selectedCountry) {\r\n            const prevCountry = countries[selectedCountry];\r\n            if (prevCountry && prevCountry.userData.parts) {\r\n                prevCountry.userData.parts.forEach(part => {\r\n                    part.line.material.color.setHex(prevCountry.userData.originalColor);\r\n                    part.shape.material.opacity = 0;\r\n                    part.line.material.needsUpdate = true;\r\n                    part.shape.material.needsUpdate = true;\r\n                });\r\n            }\r\n        }\r\n        selectedCountry = null;\r\n        countryNameDisplay.textContent = '';\r\n        const statsContainer = document.getElementById('country-stats');\r\n        statsContainer.innerHTML = '';\r\n        return;\r\n    }\r\n\r\n    const intersectedObject = intersects[0].object;\r\n    const countryGroup = intersectedObject.parent;\r\n    const countryName = countryGroup.userData.name;\r\n\r\n    // Reset previous selection if different from current\r\n    if (selectedCountry && selectedCountry !== countryGroup.userData.id) {\r\n        const prevCountry = countries[selectedCountry];\r\n        if (prevCountry && prevCountry.userData.parts) {\r\n            prevCountry.userData.parts.forEach(part => {\r\n                prevCountry.userData.parts.forEach(part => {\r\n                    part.line.material.color.setHex(prevCountry.userData.originalColor);\r\n                    part.shape.material.opacity = 0;\r\n                    part.line.material.needsUpdate = true;\r\n                    part.shape.material.needsUpdate = true;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    // Set new selection\r\n    selectedCountry = countryGroup.userData.id;\r\n    countryNameDisplay.textContent = countryName;\r\n\r\n    // Highlight selected country\r\n    const highlightColor = 0xFFFFFF;\r\n    const linehighlightColor = 0x17202a;\r\n    \r\n    if (countryGroup.userData.parts) {\r\n        countryGroup.userData.parts.forEach(part => {\r\n            part.line.material.color.setHex(linehighlightColor);\r\n            part.shape.material.color.setHex(highlightColor);\r\n            part.shape.material.opacity = 0.6;\r\n            part.line.material.needsUpdate = true;\r\n            part.shape.material.needsUpdate = true;\r\n        });\r\n    }\r\n\r\n    // Fetch and display stats\r\n    fetchCountryStats(countryName).then(stats => {\r\n        if (stats) {\r\n            displayCountryStats(countryName, stats);\r\n        } else {\r\n            console.error(`No stats available for ${countryName}`);\r\n        }\r\n    });\r\n}\r\n\r\nfunction displayCountryStats(countryName, stats) {\r\n    const statsContainer = document.getElementById('country-stats');\r\n    if (!statsContainer) {\r\n        console.error(\"Stats container not found in the DOM.\");\r\n        return;\r\n    }\r\n\r\n    // Sanitize inputs\r\n    const sanitizedCountryName = sanitizeString(countryName);\r\n    \r\n    // Clear previous stats\r\n    statsContainer.innerHTML = '';\r\n    \r\n    if (stats) {\r\n        // Add flag and country name\r\n        statsContainer.innerHTML = `\r\n            <div style=\"text-align: center; margin-bottom: 15px;\">\r\n                ${stats.flags ? `<img src=\"${stats.flags.png}\" alt=\"${sanitizedCountryName} flag\" style=\"max-width: 100px; margin-bottom: 10px;\">` : ''}\r\n                <h2>${sanitizedCountryName}</h2>\r\n            </div>\r\n        `;\r\n\r\n        // Sanitize all string inputs\r\n        const currencies = stats.currencies ? Object.values(stats.currencies)\r\n            .map(c => `${sanitizeString(c.name)} (${sanitizeString(c.symbol || '')})`)\r\n            .join(', ') : 'N/A';\r\n        \r\n        // Format population density\r\n        const populationDensity = stats.area ? (stats.population / stats.area).toFixed(2) : 'N/A';\r\n        \r\n        // Format car info\r\n        const carInfo = stats.car ? `${sanitizeString(stats.car.side)} side, ${stats.car.signs ? stats.car.signs.map(sanitizeString).join(', ') : 'N/A'}` : 'N/A';\r\n        \r\n        // Get start of week\r\n        const startOfWeek = stats.startOfWeek ? sanitizeString(stats.startOfWeek.charAt(0).toUpperCase() + stats.startOfWeek.slice(1)) : 'N/A';\r\n\r\n        // Format GINI index - get the most recent year's value\r\n        let giniIndex = 'N/A';\r\n        if (stats.gini && typeof stats.gini === 'object') {\r\n            const giniYears = Object.keys(stats.gini).sort((a, b) => b - a); // Sort years descending\r\n            if (giniYears.length > 0) {\r\n                const latestYear = giniYears[0];\r\n                giniIndex = `${stats.gini[latestYear].toFixed(1)}% (${latestYear})`;\r\n            }\r\n        }\r\n        \r\n        statsContainer.innerHTML += `\r\n            <h3>Population & Demographics</h3>\r\n            <p><strong>Population:</strong> ${stats.population.toLocaleString()}</p>\r\n            <p><strong>Density:</strong> ${populationDensity} people/km²</p>\r\n            ${stats.demonyms ? `<p><strong>Demonym:</strong> ${sanitizeString(stats.demonyms.eng.m)}/${sanitizeString(stats.demonyms.eng.f)}</p>` : ''}\r\n            <p><strong>Languages:</strong> ${stats.languages ? Object.values(stats.languages).map(sanitizeString).join(', ') : 'N/A'}</p>\r\n            \r\n            <h3>Geography & Administration</h3>\r\n            <p><strong>Region:</strong> ${sanitizeString(stats.region)}</p>\r\n            <p><strong>Subregion:</strong> ${sanitizeString(stats.subregion || 'N/A')}</p>\r\n            <p><strong>Capital:</strong> ${sanitizeString(stats.capital ? stats.capital[0] : 'N/A')}</p>\r\n            <p><strong>Area:</strong> ${stats.area.toLocaleString()} km²</p>\r\n            ${stats.borders ? `<p><strong>Borders:</strong> ${stats.borders.map(sanitizeString).join(', ')}</p>` : ''}\r\n            \r\n            <h3>Economic & Social</h3>\r\n            <p><strong>Currency:</strong> ${currencies}</p>\r\n            <p><strong>GINI Index:</strong> ${giniIndex}</p>\r\n            <p><strong>UN Member:</strong> ${stats.unMember ? 'Yes' : 'No'}</p>\r\n            <p><strong>Independent:</strong> ${stats.independent ? 'Yes' : 'No'}</p>\r\n            \r\n            <h3>Additional Info</h3>\r\n            <p><strong>Timezones:</strong> ${stats.timezones.map(sanitizeString).join(', ')}</p>\r\n            <p><strong>Driving:</strong> ${carInfo}</p>\r\n            <p><strong>Week starts:</strong> ${startOfWeek}</p>\r\n            ${stats.tld ? `<p><strong>Domain:</strong> ${stats.tld.map(sanitizeString).join(', ')}</p>` : ''}\r\n            ${stats.idd?.root ? `<p><strong>Phone Code:</strong> ${sanitizeString(stats.idd.root)}${sanitizeString(stats.idd.suffixes?.[0] || '')}</p>` : ''}\r\n        `;\r\n    } else {\r\n        statsContainer.innerHTML += \"<p>No data available.</p>\";\r\n    }\r\n}\r\n\r\n// Animation loop\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    \r\n    if (isAutoRotating) {\r\n        // Calculate zoom percentage (0 = minimum zoom, 1 = maximum zoom)\r\n        const zoomPercentage = (currentZoom - minZoom) / (maxZoom - minZoom);\r\n        \r\n        // Only rotate if not fully zoomed in (using a threshold near 1)\r\n        if (zoomPercentage < 0.95) {\r\n            // Gradually reduce speed as we zoom in, stop completely at 95% zoom\r\n            const speedFactor = 1 - (zoomPercentage / 0.95);\r\n            targetRotation.y += autoRotationSpeed * speedFactor;\r\n        }\r\n    }\r\n    \r\n    // Smooth interpolation between current and target rotation\r\n    globeRotation.x += (targetRotation.x - globeRotation.x) * INTERPOLATION_FACTOR;\r\n    globeRotation.y += (targetRotation.y - globeRotation.y) * INTERPOLATION_FACTOR;\r\n    \r\n    // Only update if rotation changed significantly\r\n    if (Math.abs(lastRotation.x - globeRotation.x) > 0.0001 || \r\n        Math.abs(lastRotation.y - globeRotation.y) > 0.0001) {\r\n        globeGroup.rotation.x = globeRotation.x;\r\n        globeGroup.rotation.y = globeRotation.y;\r\n        \r\n        lastRotation.x = globeRotation.x;\r\n        lastRotation.y = globeRotation.y;\r\n    }\r\n    \r\n    renderer.render(scene, camera);\r\n}\r\n\r\n// Start the application\r\ninit();"],"names":["countryNamesByCode","rateLimiter","checkRateLimit","now","timePassed","refillAmount","fetchCountryStats","countryName","apiUrl","controller","timeout","response","jsonData","sanitizedData","error","initErrorHandling","msg","url","lineNo","columnNo","errorMessage","errorContainer","event","sanitizeString","str","scene","camera","renderer","raycaster","mouse","countryNameDisplay","globe","globeGroup","countries","hoveredCountry","selectedCountry","isDragging","previousMousePosition","globeRotation","minZoom","maxZoom","currentZoom","isAutoRotating","autoRotationSpeed","materialPool","lastRotation","targetRotation","INTERPOLATION_FACTOR","init","createGlobe","ambientLight","directionalLight","onWindowResize","onMouseMove","onMouseDown","onMouseUp","onMouseWheel","onDoubleClick","animate","globeGeometry","globeMaterial","data","feature","createCountryOutlines","addKosovo","createSimulatedGlobe","radius","kosovoPoints","lng","lat","latLngToVector3","lineGeometry","p","countryGroup","countryLine","shapeGeometry","vertices","uvs","center","i","countryShape","geoJson","createCountryPart","poly","coords","points","distance","skipPoints","coord","point","phi","theta","x","y","z","basicShape","basicMaterial","basicGlobe","throttle","func","limit","inThrottle","args","context","deltaMove","throttledCheckIntersections","checkIntersections","country","part","allMeshes","intersects","highlightColor","linehighlightColor","e","delta","prevCountry","statsContainer","stats","displayCountryStats","sanitizedCountryName","currencies","c","populationDensity","carInfo","startOfWeek","giniIndex","giniYears","a","b","latestYear","_a","_b","zoomPercentage","speedFactor"],"mappings":"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"}